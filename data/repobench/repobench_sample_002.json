{
  "repo_name": "jianchang512/vocal-separate",
  "file_path": "start.py",
  "context": [
    {
      "identifier": "cfg",
      "path": "vocal/cfg.py",
      "snippet": "LANG = \"en\" if locale.getdefaultlocale()[0].split('_')[0].lower() != 'zh' else \"zh\"\nROOT_DIR = os.getcwd()\nMODEL_DIR = os.path.join(ROOT_DIR, 'pretrained_models')\nSTATIC_DIR = os.path.join(ROOT_DIR, 'static')\nTMP_DIR = os.path.join(STATIC_DIR, 'tmp')\nFILES_DIR = os.path.join(STATIC_DIR, 'files')"
    },
    {
      "identifier": "tool",
      "path": "vocal/tool.py",
      "snippet": "def runffmpeg(arg):\ndef checkupdate():\ndef openweb(web_address):"
    },
    {
      "identifier": "ROOT_DIR",
      "path": "vocal/cfg.py",
      "snippet": "ROOT_DIR = os.getcwd()"
    }
  ],
  "import_statement": "import logging\nimport threading\nimport sys\nimport os\nimport subprocess\nfrom flask import Flask, request, render_template, jsonify, send_from_directory\nfrom gevent.pywsgi import WSGIServer, WSGIHandler,LoggingLogAdapter\nfrom logging.handlers import RotatingFileHandler\nfrom vocal import cfg, tool\nfrom vocal.cfg import ROOT_DIR\nfrom spleeter.separator import Separator",
  "token_num": 795,
  "cropped_code": "\nclass CustomRequestHandler(WSGIHandler):\n    def log_request(self):\n        pass\n\n# \u7981\u7528 Werkzeug \u9ed8\u8ba4\u7684\u65e5\u5fd7\u5904\u7406\u5668\nlog = logging.getLogger('werkzeug')\nlog.handlers[:] = []\nlog.setLevel(logging.WARNING)\n\napp = Flask(__name__, static_folder=os.path.join(ROOT_DIR, 'static'), static_url_path='/static',\n            template_folder=os.path.join(ROOT_DIR, 'templates'))\nroot_log = logging.getLogger()  # Flask\u7684\u6839\u65e5\u5fd7\u8bb0\u5f55\u5668\nroot_log.handlers = []\nroot_log.setLevel(logging.WARNING)\n\n# \u914d\u7f6e\u65e5\u5fd7\napp.logger.setLevel(logging.WARNING)  # \u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b\u4e3a INFO\n# \u521b\u5efa RotatingFileHandler \u5bf9\u8c61\uff0c\u8bbe\u7f6e\u5199\u5165\u7684\u6587\u4ef6\u8def\u5f84\u548c\u5927\u5c0f\u9650\u5236\nfile_handler = RotatingFileHandler(os.path.join(ROOT_DIR, 'vocal.log'), maxBytes=1024 * 1024, backupCount=5)\n# \u521b\u5efa\u65e5\u5fd7\u7684\u683c\u5f0f\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n# \u8bbe\u7f6e\u6587\u4ef6\u5904\u7406\u5668\u7684\u7ea7\u522b\u548c\u683c\u5f0f\nfile_handler.setLevel(logging.WARNING)\nfile_handler.setFormatter(formatter)\n# \u5c06\u6587\u4ef6\u5904\u7406\u5668\u6dfb\u52a0\u5230\u65e5\u5fd7\u8bb0\u5f55\u5668\u4e2d\napp.logger.addHandler(file_handler)\n\n\n@app.route('/static/<path:filename>')\ndef static_files(filename):\n    return send_from_directory(app.config['STATIC_FOLDER'], filename)\n\n@app.route('/')\ndef index():\n    return render_template(\"index.html\",cuda=cfg.cuda, language=cfg.LANG,root_dir=ROOT_DIR.replace('\\\\', '/'))\n\n\n# \u4e0a\u4f20\u97f3\u9891\n@app.route('/upload', methods=['POST'])\ndef upload():\n    try:\n        # \u83b7\u53d6\u4e0a\u4f20\u7684\u6587\u4ef6\n        audio_file = request.files['audio']\n        # \u5982\u679c\u662fmp4\n        noextname, ext = os.path.splitext(audio_file.filename)\n        ext = ext.lower()\n        # \u5982\u679c\u662f\u89c6\u9891\uff0c\u5148\u5206\u79bb\n        wav_file = os.path.join(cfg.TMP_DIR, f'{noextname}.wav')\n        if os.path.exists(wav_file) and os.path.getsize(wav_file) > 0:\n            return jsonify({'code': 0, 'msg': cfg.transobj['lang1'], \"data\": os.path.basename(wav_file)})\n        msg=\"\"\n        if ext in ['.mp4', '.mov', '.avi', '.mkv', '.mpeg', '.mp3', '.flac']:\n            video_file = os.path.join(cfg.TMP_DIR, f'{noextname}{ext}')\n            audio_file.save(video_file)\n            params = [\n                \"-i\",\n                video_file,\n            ]\n            if ext not in ['.mp3', '.flac']:\n                params.append('-vn')\n            params.append(wav_file)\n",
  "all_code": "\nclass CustomRequestHandler(WSGIHandler):\n    def log_request(self):\n        pass\n\n# \u7981\u7528 Werkzeug \u9ed8\u8ba4\u7684\u65e5\u5fd7\u5904\u7406\u5668\nlog = logging.getLogger('werkzeug')\nlog.handlers[:] = []\nlog.setLevel(logging.WARNING)\n\napp = Flask(__name__, static_folder=os.path.join(ROOT_DIR, 'static'), static_url_path='/static',\n            template_folder=os.path.join(ROOT_DIR, 'templates'))\nroot_log = logging.getLogger()  # Flask\u7684\u6839\u65e5\u5fd7\u8bb0\u5f55\u5668\nroot_log.handlers = []\nroot_log.setLevel(logging.WARNING)\n\n# \u914d\u7f6e\u65e5\u5fd7\napp.logger.setLevel(logging.WARNING)  # \u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b\u4e3a INFO\n# \u521b\u5efa RotatingFileHandler \u5bf9\u8c61\uff0c\u8bbe\u7f6e\u5199\u5165\u7684\u6587\u4ef6\u8def\u5f84\u548c\u5927\u5c0f\u9650\u5236\nfile_handler = RotatingFileHandler(os.path.join(ROOT_DIR, 'vocal.log'), maxBytes=1024 * 1024, backupCount=5)\n# \u521b\u5efa\u65e5\u5fd7\u7684\u683c\u5f0f\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n# \u8bbe\u7f6e\u6587\u4ef6\u5904\u7406\u5668\u7684\u7ea7\u522b\u548c\u683c\u5f0f\nfile_handler.setLevel(logging.WARNING)\nfile_handler.setFormatter(formatter)\n# \u5c06\u6587\u4ef6\u5904\u7406\u5668\u6dfb\u52a0\u5230\u65e5\u5fd7\u8bb0\u5f55\u5668\u4e2d\napp.logger.addHandler(file_handler)\n\n\n@app.route('/static/<path:filename>')\ndef static_files(filename):\n    return send_from_directory(app.config['STATIC_FOLDER'], filename)\n\n@app.route('/')\ndef index():\n    return render_template(\"index.html\",cuda=cfg.cuda, language=cfg.LANG,root_dir=ROOT_DIR.replace('\\\\', '/'))\n\n\n# \u4e0a\u4f20\u97f3\u9891\n@app.route('/upload', methods=['POST'])\ndef upload():\n    try:\n        # \u83b7\u53d6\u4e0a\u4f20\u7684\u6587\u4ef6\n        audio_file = request.files['audio']\n        # \u5982\u679c\u662fmp4\n        noextname, ext = os.path.splitext(audio_file.filename)\n        ext = ext.lower()\n        # \u5982\u679c\u662f\u89c6\u9891\uff0c\u5148\u5206\u79bb\n        wav_file = os.path.join(cfg.TMP_DIR, f'{noextname}.wav')\n        if os.path.exists(wav_file) and os.path.getsize(wav_file) > 0:\n            return jsonify({'code': 0, 'msg': cfg.transobj['lang1'], \"data\": os.path.basename(wav_file)})\n        msg=\"\"\n        if ext in ['.mp4', '.mov', '.avi', '.mkv', '.mpeg', '.mp3', '.flac']:\n            video_file = os.path.join(cfg.TMP_DIR, f'{noextname}{ext}')\n            audio_file.save(video_file)\n            params = [\n                \"-i\",\n                video_file,\n            ]\n            if ext not in ['.mp3', '.flac']:\n                params.append('-vn')\n            params.append(wav_file)",
  "next_line": "            rs = tool.runffmpeg(params)",
  "gold_snippet_index": 1,
  "created_at": "2023-12-26 06:20:35+00:00",
  "level": "2k"
}